import { useState, useEffect } from 'react';

export default function Admin() {
  const [usuario, setUsuario] = useState('');
  const [password, setPassword] = useState('');
  const [logueado, setLogueado] = useState(false);
  const [error, setError] = useState('');

  // --- Estados para la interfaz de ventas ---
  const [productos, setProductos] = useState([]);
  const [busqueda, setBusqueda] = useState('');
  const [productoSeleccionado, setProductoSeleccionado] = useState(null);
  const [cantidad, setCantidad] = useState('1');
  const [carrito, setCarrito] = useState([]);
  const [formaPago, setFormaPago] = useState({ efectivo: '', transferencia: '', pos: '' });
  const [cliente, setCliente] = useState('');
  const [observaciones, setObservaciones] = useState('');
  const [loadingProductos, setLoadingProductos] = useState(false);
  const [errorProductos, setErrorProductos] = useState('');
  const [errorPago, setErrorPago] = useState('');
  const [loadingVenta, setLoadingVenta] = useState(false);
  const [mensajeVenta, setMensajeVenta] = useState('');

  // --- Estados para caja ---
  const [caja, setCaja] = useState(null);
  const [loadingCaja, setLoadingCaja] = useState(false);
  const [turno, setTurno] = useState('Mañana');
  const [empleadoCaja, setEmpleadoCaja] = useState('');
  const [errorCaja, setErrorCaja] = useState('');
  const [mensajeCaja, setMensajeCaja] = useState('');
  const [montoApertura, setMontoApertura] = useState('30000');
  const [montoCierre, setMontoCierre] = useState('30000');

  // --- Estados para gestión de ventas ---
  const [ventas, setVentas] = useState([]);
  const [loadingVentas, setLoadingVentas] = useState(false);
  const [errorVentas, setErrorVentas] = useState('');
  const [eliminandoVenta, setEliminandoVenta] = useState(null);
  const [mostrarGestionVentas, setMostrarGestionVentas] = useState(false);

  // --- Login persistente con localStorage ---
  useEffect(() => {
    if (localStorage.getItem('adminLogueado') === '1') {
      setLogueado(true);
    }
  }, []);

  const handleLogin = (e) => {
    e.preventDefault();
    if (usuario === 'alnortegrow' && password === '12345678') {
      setLogueado(true);
      setError('');
      localStorage.setItem('adminLogueado', '1');
    } else {
      setError('Usuario o contraseña incorrectos');
    }
  };

  const handleLogout = () => {
    setLogueado(false);
    setUsuario('');
    setPassword('');
    localStorage.removeItem('adminLogueado');
  };

  // --- Cargar productos desde la API ---
  useEffect(() => {
    if (!logueado) return;
    const cargar = async () => {
      setLoadingProductos(true);
      setErrorProductos('');
      try {
        const API_URL = (import.meta.env.VITE_API_URL || 'http://localhost:3001') + '/api';
        const res = await fetch(`${API_URL}/productos`);
        if (!res.ok) throw new Error('Error al cargar productos');
        const data = await res.json();
        setProductos(data);
      } catch (err) {
        setErrorProductos('No se pudieron cargar los productos');
      } finally {
        setLoadingProductos(false);
      }
    };
    cargar();
  }, [logueado]);

  // --- Calcular total ---
  const calcularPrecioOferta = (precioOriginal, oferta) => {
    if (!oferta) return null;
    const match = oferta.match(/(\d+)%/);
    if (match) {
      const descuento = parseInt(match[1]);
      return Math.round(precioOriginal * (1 - descuento / 100));
    }
    const precioMatch = oferta.match(/(\d+)/);
    if (precioMatch) {
      return parseInt(precioMatch[1]);
    }
    return null;
  };
  const formatearPrecio = (precio) => new Intl.NumberFormat('es-AR', { style: 'currency', currency: 'ARS', maximumFractionDigits: 0 }).format(precio);
  const cantidadNum = Number(cantidad);
  const totalVenta = carrito.reduce((acc, p) => acc + (p.oferta && calcularPrecioOferta(p.precio, p.oferta) !== null ? calcularPrecioOferta(p.precio, p.oferta) : p.precio) * p.cantidad, 0);
  const totalPago = Number(formaPago.efectivo) + Number(formaPago.transferencia) + Number(formaPago.pos);

  // --- Validar total de métodos de pago
  useEffect(() => {
    if (totalPago > totalVenta) {
      setErrorPago('El total de los métodos de pago no puede superar el total de la venta.');
    } else {
      setErrorPago('');
    }
  }, [totalPago, totalVenta]);

  // --- Agregar producto al carrito ---
  const agregarAlCarrito = () => {
    if (!productoSeleccionado || cantidad < 1) return;
    // Validar stock
    const stock = productoSeleccionado.stock !== undefined && productoSeleccionado.stock !== '' && !isNaN(Number(productoSeleccionado.stock)) ? Number(productoSeleccionado.stock) : Infinity;
    if (stock <= 0) {
      alert('No se puede agregar un producto sin stock');
      return;
    }
    if (cantidad > stock) {
      alert('No hay suficiente stock disponible');
      return;
    }
    const existe = carrito.find(p => p.id === productoSeleccionado.id);
    if (existe) {
      if (existe.cantidad + cantidad > stock) {
        alert('No hay suficiente stock disponible');
        return;
      }
      setCarrito(carrito.map(p => p.id === productoSeleccionado.id ? { ...p, cantidad: p.cantidad + cantidad } : p));
    } else {
      setCarrito([...carrito, { ...productoSeleccionado, cantidad }]);
    }
    setProductoSeleccionado(null);
    setCantidad('1');
  };

  // --- Quitar producto del carrito ---
  const quitarDelCarrito = (id) => {
    setCarrito(carrito.filter(p => p.id !== id));
  };

  const handleGenerarVenta = async () => {
    if (carrito.length === 0 || totalPago !== totalVenta || totalPago > totalVenta) return;
    setLoadingVenta(true);
    setMensajeVenta('');
    try {
      const API_URL = (import.meta.env.VITE_API_URL || 'http://localhost:3001') + '/api';
      const res = await fetch(`${API_URL}/ventas`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          productos: carrito.map(p => p.nombre),
          cantidades: carrito.map(p => p.cantidad),
          total: totalVenta,
          efectivo: Number(formaPago.efectivo) || 0,
          transferencia: Number(formaPago.transferencia) || 0,
          pos: Number(formaPago.pos) || 0,
          cliente,
          observaciones
        })
      });
      if (!res.ok) throw new Error('Error al registrar venta');
      setMensajeVenta('✅ Venta registrada correctamente');
      setCarrito([]);
      setFormaPago({ efectivo: '', transferencia: '', pos: '' });
      setCliente('');
      setObservaciones('');
      await cargarCaja();
    } catch (err) {
      setMensajeVenta('❌ Error al registrar venta');
    } finally {
      setLoadingVenta(false);
    }
  };

  // Handlers para autocompletar el total en un método de pago
  const handlePagoClick = (metodo) => {
    setFormaPago({
      efectivo: metodo === 'efectivo' ? String(totalVenta) : '',
      transferencia: metodo === 'transferencia' ? String(totalVenta) : '',
      pos: metodo === 'pos' ? String(totalVenta) : ''
    });
  };

  // --- Consultar estado de caja al iniciar sesión y tras cada venta ---
  const cargarCaja = async () => {
    setLoadingCaja(true);
    try {
      const API_URL = (import.meta.env.VITE_API_URL || 'http://localhost:3001') + '/api';
      const res = await fetch(`${API_URL}/caja/estado`);
      const data = await res.json();
      setCaja(data);
    } catch (err) {
      setCaja(null);
    } finally {
      setLoadingCaja(false);
    }
  };

  useEffect(() => {
    if (!logueado) return;
    cargarCaja();
  }, [logueado]);

  // --- Abrir caja ---
  const handleAbrirCaja = async () => {
    if (!empleadoCaja) { setErrorCaja('Ingrese el nombre del empleado'); return; }
    setLoadingCaja(true); setErrorCaja(''); setMensajeCaja('');
    try {
      const API_URL = (import.meta.env.VITE_API_URL || 'http://localhost:3001') + '/api';
      const res = await fetch(`${API_URL}/caja/abrir`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ turno, empleado: empleadoCaja, montoApertura })
      });
      if (!res.ok) throw new Error('Error al abrir caja');
      setMensajeCaja('✅ Caja abierta');
      setEmpleadoCaja('');
      setCaja({ abierta: true, turno, empleado: empleadoCaja });
    } catch (err) {
      setErrorCaja('No se pudo abrir la caja');
    } finally {
      setLoadingCaja(false);
    }
  };

  // --- Cerrar caja ---
  const handleCerrarCaja = async () => {
    setLoadingCaja(true); setErrorCaja(''); setMensajeCaja('');
    try {
      const API_URL = (import.meta.env.VITE_API_URL || 'http://localhost:3001') + '/api';
      const res = await fetch(`${API_URL}/caja/cerrar`, { 
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ montoCierre: Number(montoCierre) || 30000 })
      });
      if (!res.ok) throw new Error('Error al cerrar caja');
      setMensajeCaja('✅ Caja cerrada');
      setCaja({ abierta: false });
    } catch (err) {
      setErrorCaja('No se pudo cerrar la caja');
    } finally {
      setLoadingCaja(false);
    }
  };

  // --- Cargar empleados desde la API ---
  const [empleados, setEmpleados] = useState([]);
  useEffect(() => {
    if (!logueado) return;
    const cargarEmpleados = async () => {
      try {
        const API_URL = (import.meta.env.VITE_API_URL || 'http://localhost:3001') + '/api';
        const res = await fetch(`${API_URL}/empleados`);
        const data = await res.json();
        setEmpleados(data);
      } catch (err) {
        setEmpleados([]);
      }
    };
    cargarEmpleados();
  }, [logueado]);

  // --- Funciones para gestión de ventas ---
  const cargarVentas = async () => {
    setLoadingVentas(true);
    setErrorVentas('');
    try {
      const API_URL = (import.meta.env.VITE_API_URL || 'http://localhost:3001') + '/api';
      const res = await fetch(`${API_URL}/ventas`);
      if (!res.ok) throw new Error('Error al cargar ventas');
      const data = await res.json();
      setVentas(data);
    } catch (err) {
      setErrorVentas('No se pudieron cargar las ventas');
    } finally {
      setLoadingVentas(false);
    }
  };

  const eliminarVenta = async (idVenta) => {
    if (!confirm('¿Estás seguro de que quieres eliminar esta venta? Esta acción no se puede deshacer.')) {
      return;
    }
    
    setEliminandoVenta(idVenta);
    try {
      const API_URL = (import.meta.env.VITE_API_URL || 'http://localhost:3001') + '/api';
      const res = await fetch(`${API_URL}/ventas/${idVenta}`, {
        method: 'DELETE'
      });
      
      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || 'Error al eliminar venta');
      }
      
      const result = await res.json();
      alert(`✅ Venta eliminada correctamente\nTotal eliminado: $${result.totalEliminado}`);
      
      // Recargar ventas y caja
      await cargarVentas();
      await cargarCaja();
    } catch (err) {
      alert(`❌ Error: ${err.message}`);
    } finally {
      setEliminandoVenta(null);
    }
  };

  // --- Render ---
  if (!logueado) {
    return (
      <div style={{ minHeight: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center', background: '#f8fafc' }}>
        <form onSubmit={handleLogin} style={{ background: 'white', padding: '2.5rem 2rem', borderRadius: '16px', boxShadow: '0 4px 16px rgba(0,0,0,0.08)', minWidth: 320 }}>
          <h2 style={{ marginBottom: '1.5rem', textAlign: 'center', color: '#1e293b' }}>Acceso Admin</h2>
          <div style={{ marginBottom: '1rem' }}>
            <label style={{ display: 'block', marginBottom: 6, color: '#64748b', fontWeight: 600 }}>Usuario</label>
            <input type="text" value={usuario} onChange={e => setUsuario(e.target.value)} autoFocus required style={{ width: '100%', padding: '0.7rem', borderRadius: 8, border: '1px solid #cbd5e1', fontSize: '1rem' }} />
          </div>
          <div style={{ marginBottom: '1.5rem' }}>
            <label style={{ display: 'block', marginBottom: 6, color: '#64748b', fontWeight: 600 }}>Contraseña</label>
            <input type="password" value={password} onChange={e => setPassword(e.target.value)} required style={{ width: '100%', padding: '0.7rem', borderRadius: 8, border: '1px solid #cbd5e1', fontSize: '1rem' }} />
          </div>
          {error && <div style={{ color: '#dc2626', marginBottom: 12, textAlign: 'center', fontWeight: 600 }}>{error}</div>}
          <button type="submit" style={{ width: '100%', background: 'linear-gradient(135deg, #fbbf24, #f59e0b)', color: '#1e293b', border: 'none', padding: '0.9rem', borderRadius: 10, fontSize: '1.1rem', fontWeight: 700, cursor: 'pointer', boxShadow: '0 2px 8px rgba(251,191,36,0.10)' }}>Ingresar</button>
        </form>
      </div>
    );
  }

  return (
    <div style={{ minHeight: '100vh', background: '#f8fafc', padding: '2rem 0' }}>
      <div style={{
        display: 'flex',
        flexDirection: 'row',
        maxWidth: 1200,
        margin: '0 auto',
        gap: 32,
        alignItems: 'flex-start',
        position: 'relative',
        flexWrap: 'wrap',
      }}>
        {/* Panel de caja flotante a la izquierda */}
        <div style={{
          minWidth: 320,
          maxWidth: 340,
          background: 'white',
          borderRadius: 16,
          boxShadow: '0 4px 16px rgba(0,0,0,0.08)',
          padding: '2rem 1.5rem',
          position: 'sticky',
          top: 32,
          flex: '0 0 340px',
          zIndex: 2,
          marginBottom: 32,
        }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>
            <h2 style={{ color: '#1e293b', fontWeight: 800, marginBottom: 0 }}>Panel de Caja</h2>
            <button onClick={handleLogout} style={{ background: 'none', border: 'none', color: '#ef4444', fontWeight: 700, fontSize: 16, cursor: 'pointer' }}>Salir</button>
          </div>
          {/* Resumen de caja */}
          <div style={{ background: '#f8fafc', borderRadius: 12, padding: '1rem 1.2rem', marginBottom: 18, border: '1px solid #e2e8f0' }}>
            <div style={{ fontWeight: 700, color: '#64748b', marginBottom: 4 }}>Monto inicial caja:</div>
            <div style={{ fontWeight: 800, color: '#1e293b', fontSize: 18, marginBottom: 10 }}>$ {caja && caja.montoApertura ? caja.montoApertura : '30000'}</div>
            <div style={{ fontWeight: 700, color: '#64748b', marginBottom: 4 }}>Total Efectivo ganado:</div>
            <div style={{ fontWeight: 800, color: '#059669', fontSize: 18, marginBottom: 8 }}>$ {caja && caja.totales ? caja.totales.efectivo : 0}</div>
            <div style={{ fontWeight: 700, color: '#64748b', marginBottom: 4 }}>Total Transferencia ganado:</div>
            <div style={{ fontWeight: 800, color: '#0ea5e9', fontSize: 18, marginBottom: 8 }}>$ {caja && caja.totales ? caja.totales.transferencia : 0}</div>
            <div style={{ fontWeight: 700, color: '#64748b', marginBottom: 4 }}>Total POS ganado:</div>
            <div style={{ fontWeight: 800, color: '#f59e0b', fontSize: 18, marginBottom: 8 }}>$ {caja && caja.totales ? caja.totales.pos : 0}</div>
            <div style={{ fontWeight: 700, color: '#64748b', marginBottom: 4 }}>Total vendido:</div>
            <div style={{ fontWeight: 800, color: '#1e293b', fontSize: 18 }}>$ {caja && caja.totalVendido ? caja.totalVendido : 0}</div>
          </div>
          {/* Estado de caja y controles */}
          {loadingCaja ? <div style={{ color: '#64748b', marginBottom: 16 }}>Cargando estado de caja...</div> : (
            caja && caja.abierta ? (
              <div style={{ marginBottom: 24 }}>
                <div style={{ color: '#059669', fontWeight: 700, marginBottom: 8 }}>Caja abierta ({caja.turno}, {caja.empleado})</div>
                <div style={{ display: 'flex', gap: 12, alignItems: 'center', marginBottom: 8 }}>
                  <span style={{ fontWeight: 700, fontSize: '1rem' }}>Monto de cierre:</span>
                  <input type="text" value={montoCierre} onChange={e => { if (/^\d*$/.test(e.target.value)) setMontoCierre(e.target.value); }} style={{ padding: '0.7rem 1rem', borderRadius: 8, border: '1px solid #cbd5e1', fontWeight: 700, fontSize: '1rem', width: 120 }} />
                  <button onClick={handleCerrarCaja} style={{ background: 'linear-gradient(135deg, #ef4444, #f87171)', color: '#fff', border: 'none', padding: '0.7rem 1.2rem', borderRadius: 10, fontWeight: 700, fontSize: '1rem', cursor: 'pointer', marginBottom: 8 }}>Cerrar caja</button>
                </div>
              </div>
            ) : (
              <div style={{ marginBottom: 24 }}>
                <div style={{ color: '#64748b', fontWeight: 600, marginBottom: 8 }}>Caja cerrada</div>
                <div style={{ display: 'flex', gap: 16, alignItems: 'center', marginBottom: 8, flexWrap: 'wrap', justifyContent: 'center' }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: 12, minWidth: 220 }}>
                    <span style={{ fontWeight: 700, fontSize: '1rem', width: 80, textAlign: 'right' }}>Turno</span>
                    <select value={turno} onChange={e => setTurno(e.target.value)} style={{ padding: '0.7rem 1rem', borderRadius: 8, border: '1px solid #cbd5e1', fontWeight: 700, fontSize: '1rem', width: 120, height: '2.8rem' }}>
                      <option value="Mañana">Mañana</option>
                      <option value="Tarde">Tarde</option>
                    </select>
                  </div>
                  <div style={{ display: 'flex', alignItems: 'center', gap: 12, minWidth: 220 }}>
                    <span style={{ fontWeight: 700, fontSize: '1rem', width: 80, textAlign: 'right' }}>Empleado</span>
                    <select value={empleadoCaja} onChange={e => setEmpleadoCaja(e.target.value)} style={{ padding: '0.7rem 1rem', borderRadius: 8, border: '1px solid #cbd5e1', fontWeight: 700, fontSize: '1rem', width: 120, height: '2.8rem' }}>
                      <option value="">Seleccionar</option>
                      {empleados.map(emp => <option key={emp} value={emp}>{emp}</option>)}
                    </select>
                  </div>
                  <div style={{ display: 'flex', alignItems: 'center', gap: 12, minWidth: 220 }}>
                    <span style={{ fontWeight: 700, fontSize: '1rem', width: 80, textAlign: 'right' }}>Monto inicial</span>
                    <input type="text" value={montoApertura} onChange={e => { if (/^\d*$/.test(e.target.value)) setMontoApertura(e.target.value); }} style={{ padding: '0.7rem 1rem', borderRadius: 8, border: '1px solid #cbd5e1', fontWeight: 700, fontSize: '1rem', width: 120, height: '2.8rem' }} />
                  </div>
                  <button onClick={handleAbrirCaja} style={{ background: 'linear-gradient(135deg, #059669, #10b981)', color: '#fff', border: 'none', padding: '0.7rem 1.2rem', borderRadius: 10, fontWeight: 700, fontSize: '1rem', cursor: 'pointer', height: '2.8rem' }}>Abrir caja</button>
                </div>
              </div>
            )
          )}
          {errorCaja && <div style={{ color: '#dc2626', fontWeight: 600, marginBottom: 8 }}>{errorCaja}</div>}
          {mensajeCaja && <div style={{ color: mensajeCaja.startsWith('✅') ? '#059669' : '#dc2626', fontWeight: 700, marginBottom: 12 }}>{mensajeCaja}</div>}
        </div>
        {/* Sección de ventas a la derecha */}
        <div style={{
          flex: 1,
          minWidth: 340,
          background: 'white',
          borderRadius: 16,
          boxShadow: '0 4px 16px rgba(0,0,0,0.08)',
          padding: '2.5rem 2rem',
        }}>
          {/* Botones de navegación */}
          <div style={{ display: 'flex', gap: 16, marginBottom: 24 }}>
            <button 
              onClick={() => setMostrarGestionVentas(false)}
              style={{ 
                background: mostrarGestionVentas ? '#f1f5f9' : 'linear-gradient(135deg, #fbbf24, #f59e0b)', 
                color: mostrarGestionVentas ? '#64748b' : '#1e293b',
                border: 'none', 
                padding: '0.7rem 1.2rem', 
                borderRadius: 10, 
                fontWeight: 700, 
                fontSize: '1rem', 
                cursor: 'pointer' 
              }}
            >
              Nueva Venta
            </button>
            <button 
              onClick={() => {
                setMostrarGestionVentas(true);
                cargarVentas();
              }}
              style={{ 
                background: mostrarGestionVentas ? 'linear-gradient(135deg, #fbbf24, #f59e0b)' : '#f1f5f9', 
                color: mostrarGestionVentas ? '#1e293b' : '#64748b',
                border: 'none', 
                padding: '0.7rem 1.2rem', 
                borderRadius: 10, 
                fontWeight: 700, 
                fontSize: '1rem', 
                cursor: 'pointer' 
              }}
            >
              Gestionar Ventas
            </button>
          </div>

          {mostrarGestionVentas ? (
            // Vista de gestión de ventas
            <div>
              <h2 style={{ color: '#1e293b', fontWeight: 800, marginBottom: 24 }}>Gestión de Ventas</h2>
              
              {loadingVentas ? (
                <div style={{ textAlign: 'center', padding: '2rem', color: '#64748b' }}>Cargando ventas...</div>
              ) : errorVentas ? (
                <div style={{ color: '#dc2626', textAlign: 'center', padding: '2rem' }}>{errorVentas}</div>
              ) : ventas.length === 0 ? (
                <div style={{ textAlign: 'center', padding: '2rem', color: '#64748b' }}>No hay ventas registradas</div>
              ) : (
                <div style={{ maxHeight: '70vh', overflowY: 'auto' }}>
                  {ventas.map((venta, index) => (
                    <div key={venta.id} style={{ 
                      border: '1px solid #e2e8f0', 
                      borderRadius: 12, 
                      padding: '1.5rem', 
                      marginBottom: 16,
                      background: '#f8fafc'
                    }}>
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: 12 }}>
                        <div>
                          <div style={{ fontWeight: 700, fontSize: 18, color: '#1e293b', marginBottom: 4 }}>
                            Venta #{index + 1} - ID: {venta.id}
                          </div>
                          <div style={{ color: '#64748b', fontSize: 14 }}>
                            {venta.fecha} {venta.hora}
                          </div>
                        </div>
                        <div style={{ textAlign: 'right' }}>
                          <div style={{ fontWeight: 800, fontSize: 20, color: '#059669', marginBottom: 4 }}>
                            ${venta.total.toFixed(2)}
                          </div>
                          <div style={{ fontSize: 12, color: '#64748b' }}>
                            {venta.productos.length} producto{venta.productos.length !== 1 ? 's' : ''}
                          </div>
                        </div>
                      </div>
                      
                      {/* Productos */}
                      <div style={{ marginBottom: 12 }}>
                        <div style={{ fontWeight: 600, color: '#64748b', marginBottom: 8 }}>Productos:</div>
                        {venta.productos.map((producto, idx) => (
                          <div key={idx} style={{ 
                            display: 'flex', 
                            justifyContent: 'space-between', 
                            padding: '0.5rem 0',
                            borderBottom: idx < venta.productos.length - 1 ? '1px solid #e2e8f0' : 'none'
                          }}>
                            <span>{producto.nombre} x{producto.cantidad}</span>
                            <span style={{ fontWeight: 600 }}>${producto.subtotal.toFixed(2)}</span>
                          </div>
                        ))}
                      </div>
                      
                      {/* Métodos de pago */}
                      <div style={{ marginBottom: 12 }}>
                        <div style={{ fontWeight: 600, color: '#64748b', marginBottom: 8 }}>Métodos de pago:</div>
                        <div style={{ display: 'flex', gap: 16, flexWrap: 'wrap' }}>
                          {venta.efectivo > 0 && (
                            <span style={{ background: '#dcfce7', color: '#166534', padding: '0.3rem 0.8rem', borderRadius: 6, fontSize: 12, fontWeight: 600 }}>
                              Efectivo: ${venta.efectivo.toFixed(2)}
                            </span>
                          )}
                          {venta.transferencia > 0 && (
                            <span style={{ background: '#dbeafe', color: '#1e40af', padding: '0.3rem 0.8rem', borderRadius: 6, fontSize: 12, fontWeight: 600 }}>
                              Transferencia: ${venta.transferencia.toFixed(2)}
                            </span>
                          )}
                          {venta.pos > 0 && (
                            <span style={{ background: '#fef3c7', color: '#92400e', padding: '0.3rem 0.8rem', borderRadius: 6, fontSize: 12, fontWeight: 600 }}>
                              POS: ${venta.pos.toFixed(2)}
                            </span>
                          )}
                        </div>
                      </div>
                      
                      {/* Observaciones */}
                      {venta.observaciones && (
                        <div style={{ marginBottom: 12 }}>
                          <div style={{ fontWeight: 600, color: '#64748b', marginBottom: 4 }}>Observaciones:</div>
                          <div style={{ fontSize: 14, color: '#475569' }}>{venta.observaciones}</div>
                        </div>
                      )}
                      
                      {/* Botón eliminar */}
                      <div style={{ textAlign: 'right' }}>
                        <button 
                          onClick={() => eliminarVenta(venta.id)}
                          disabled={eliminandoVenta === venta.id}
                          style={{ 
                            background: eliminandoVenta === venta.id ? '#f1f5f9' : 'linear-gradient(135deg, #ef4444, #f87171)', 
                            color: eliminandoVenta === venta.id ? '#64748b' : '#fff',
                            border: 'none', 
                            padding: '0.7rem 1.2rem', 
                            borderRadius: 10, 
                            fontWeight: 700, 
                            fontSize: '1rem', 
                            cursor: eliminandoVenta === venta.id ? 'not-allowed' : 'pointer' 
                          }}
                        >
                          {eliminandoVenta === venta.id ? 'Eliminando...' : '🗑️ Eliminar Venta'}
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          ) : (
            // Vista de nueva venta
            caja && caja.abierta ? (
              <>
                <h2 style={{ color: '#1e293b', fontWeight: 800, marginBottom: 24 }}>Nueva Venta</h2>
                {/* Buscador y selección de producto */}
                <div style={{ display: 'flex', gap: 16, marginBottom: 24, alignItems: 'flex-end' }}>
                  <div style={{ flex: 2 }}>
                    <label style={{ fontWeight: 600, color: '#64748b', marginBottom: 6, display: 'block' }}>Buscar producto</label>
                    <input type="text" value={busqueda} onChange={e => setBusqueda(e.target.value)} placeholder="Nombre o categoría..." style={{ width: '100%', padding: '0.7rem', borderRadius: 8, border: '1px solid #cbd5e1', fontSize: '1rem' }} />
                    {loadingProductos && <div style={{ color: '#64748b', marginTop: 8 }}>Cargando productos...</div>}
                    {errorProductos && <div style={{ color: '#dc2626', marginTop: 8 }}>{errorProductos}</div>}
                    {busqueda && (
                      <div style={{ background: '#f8fafc', border: '1px solid #e2e8f0', borderRadius: 8, marginTop: 8, maxHeight: 180, overflowY: 'auto' }}>
                        {productos.filter(p => p.nombre.toLowerCase().includes(busqueda.toLowerCase()) || p.categoria.toLowerCase().includes(busqueda.toLowerCase())).slice(0, 10).map(p => (
                          <div key={p.id} style={{ padding: '0.6rem 1rem', cursor: 'pointer', borderBottom: '1px solid #e2e8f0', display: 'flex', alignItems: 'center', gap: 12 }} onClick={() => { setProductoSeleccionado(p); setBusqueda(''); }}>
                            <span style={{ fontWeight: 600 }}>{p.nombre}</span>
                            <span style={{ color: '#f59e0b', fontWeight: 500, fontSize: 13 }}>{p.categoria}</span>
                            <span style={{ marginLeft: 'auto', color: '#059669', fontWeight: 700 }}>{formatearPrecio(p.oferta && calcularPrecioOferta(p.precio, p.oferta) !== null ? calcularPrecioOferta(p.precio, p.oferta) : p.precio)}</span>
                          </div>
                        ))}
                        {productos.filter(p => p.nombre.toLowerCase().includes(busqueda.toLowerCase()) || p.categoria.toLowerCase().includes(busqueda.toLowerCase())).length === 0 && <div style={{ padding: '0.7rem', color: '#64748b' }}>No hay resultados</div>}
                      </div>
                    )}
                  </div>
                  {productoSeleccionado && (
                    <div style={{ flex: 1, background: '#f8fafc', border: '1px solid #e2e8f0', borderRadius: 10, padding: 16 }}>
                      <div style={{ fontWeight: 700, fontSize: 18, marginBottom: 8 }}>{productoSeleccionado.nombre}</div>
                      <div style={{ color: '#f59e0b', fontWeight: 500, marginBottom: 8 }}>{productoSeleccionado.categoria}</div>
                      <div style={{ color: '#059669', fontWeight: 700, marginBottom: 8 }}>{formatearPrecio(productoSeleccionado.oferta && calcularPrecioOferta(productoSeleccionado.precio, productoSeleccionado.oferta) !== null ? calcularPrecioOferta(productoSeleccionado.precio, productoSeleccionado.oferta) : productoSeleccionado.precio)}</div>
                      <div style={{ marginBottom: 12 }}>
                        <label style={{ fontWeight: 600, color: '#64748b', marginRight: 8 }}>Cantidad</label>
                        <input type="text" min={1} max={productoSeleccionado.stock || 99} value={cantidad} onChange={e => { if (/^\d*$/.test(e.target.value)) setCantidad(e.target.value); }} style={{ width: 70, padding: '0.5rem', borderRadius: 6, border: '1px solid #cbd5e1', fontSize: '1rem' }} />
                        <span style={{ color: '#64748b', marginLeft: 8, fontSize: 13 }}>Stock: {productoSeleccionado.stock || '∞'}</span>
                      </div>
                      <button onClick={agregarAlCarrito} 
                        disabled={productoSeleccionado && productoSeleccionado.stock !== undefined && productoSeleccionado.stock !== '' && !isNaN(Number(productoSeleccionado.stock)) && Number(productoSeleccionado.stock) <= 0}
                        style={{ background: 'linear-gradient(135deg, #fbbf24, #f59e0b)', color: '#1e293b', border: 'none', padding: '0.7rem 1.2rem', borderRadius: 10, fontWeight: 700, fontSize: '1rem', cursor: (productoSeleccionado && productoSeleccionado.stock !== undefined && productoSeleccionado.stock !== '' && !isNaN(Number(productoSeleccionado.stock)) && Number(productoSeleccionado.stock) <= 0) ? 'not-allowed' : 'pointer', width: '100%' }}>
                        Agregar a venta
                      </button>
                      {productoSeleccionado && productoSeleccionado.stock !== undefined && productoSeleccionado.stock !== '' && !isNaN(Number(productoSeleccionado.stock)) && Number(productoSeleccionado.stock) <= 0 && (
                        <div style={{ color: '#dc2626', fontWeight: 600, marginTop: 8 }}>Sin stock</div>
                      )}
                    </div>
                  )}
                </div>
                {/* Carrito / Resumen de venta */}
                <div style={{ marginBottom: 24 }}>
                  <h3 style={{ color: '#1e293b', fontWeight: 700, marginBottom: 12 }}>Productos en la venta</h3>
                  {carrito.length === 0 ? <div style={{ color: '#64748b' }}>No hay productos en la venta.</div> : (
                    <table style={{ width: '100%', borderCollapse: 'collapse', marginBottom: 12 }}>
                      <thead>
                        <tr style={{ background: '#f8fafc' }}>
                          <th style={{ textAlign: 'left', padding: 8 }}>Producto</th>
                          <th style={{ textAlign: 'left', padding: 8 }}>Categoría</th>
                          <th style={{ textAlign: 'right', padding: 8 }}>Precio</th>
                          <th style={{ textAlign: 'right', padding: 8 }}>Cantidad</th>
                          <th style={{ textAlign: 'right', padding: 8 }}>Subtotal</th>
                          <th></th>
                        </tr>
                      </thead>
                      <tbody>
                        {carrito.map(p => {
                          const precio = p.oferta && calcularPrecioOferta(p.precio, p.oferta) !== null ? calcularPrecioOferta(p.precio, p.oferta) : p.precio;
                          return (
                            <tr key={p.id}>
                              <td style={{ padding: 8 }}>{p.nombre}</td>
                              <td style={{ padding: 8 }}>{p.categoria}</td>
                              <td style={{ padding: 8, textAlign: 'right' }}>{formatearPrecio(precio)}</td>
                              <td style={{ padding: 8, textAlign: 'right' }}>{p.cantidad}</td>
                              <td style={{ padding: 8, textAlign: 'right' }}>{formatearPrecio(precio * p.cantidad)}</td>
                              <td style={{ padding: 8 }}><button onClick={() => quitarDelCarrito(p.id)} style={{ background: '#ef4444', color: '#fff', border: 'none', borderRadius: 6, padding: '0.3rem 0.7rem', fontWeight: 700, cursor: 'pointer' }}>Quitar</button></td>
                            </tr>
                          );
                        })}
                      </tbody>
                    </table>
                  )}
                  <div style={{ textAlign: 'right', fontWeight: 800, fontSize: 18, color: '#059669' }}>Total: {formatearPrecio(totalVenta)}</div>
                </div>
                {/* Formas de pago */}
                <div style={{ marginBottom: 24 }}>
                  <h3 style={{ color: '#1e293b', fontWeight: 700, marginBottom: 12 }}>Formas de pago</h3>
                  <div style={{ display: 'flex', gap: 16 }}>
                    <div>
                      <label style={{ fontWeight: 600, color: '#64748b', marginRight: 8, cursor: 'pointer' }} onMouseDown={() => handlePagoClick('efectivo')}>Efectivo</label>
                      <input type="text" min={0} value={formaPago.efectivo} onChange={e => { if (/^\d*$/.test(e.target.value)) setFormaPago({ ...formaPago, efectivo: e.target.value }); }} style={{ width: 100, padding: '0.5rem', borderRadius: 6, border: '1px solid #cbd5e1', fontSize: '1rem' }} />
                    </div>
                    <div>
                      <label style={{ fontWeight: 600, color: '#64748b', marginRight: 8, cursor: 'pointer' }} onMouseDown={() => handlePagoClick('transferencia')}>Transferencia</label>
                      <input type="text" min={0} value={formaPago.transferencia} onChange={e => { if (/^\d*$/.test(e.target.value)) setFormaPago({ ...formaPago, transferencia: e.target.value }); }} style={{ width: 100, padding: '0.5rem', borderRadius: 6, border: '1px solid #cbd5e1', fontSize: '1rem' }} />
                    </div>
                    <div>
                      <label style={{ fontWeight: 600, color: '#64748b', marginRight: 8, cursor: 'pointer' }} onMouseDown={() => handlePagoClick('pos')}>POS</label>
                      <input type="text" min={0} value={formaPago.pos} onChange={e => { if (/^\d*$/.test(e.target.value)) setFormaPago({ ...formaPago, pos: e.target.value }); }} style={{ width: 100, padding: '0.5rem', borderRadius: 6, border: '1px solid #cbd5e1', fontSize: '1rem' }} />
                    </div>
                  </div>
                  <div style={{ color: '#64748b', marginTop: 8, fontSize: 13 }}>El total de las formas de pago debe coincidir con el total de la venta.</div>
                </div>
                {/* Cliente y observaciones */}
                <div style={{ marginBottom: 24, display: 'flex', gap: 16 }}>
                  <div style={{ flex: 1 }}>
                    <label style={{ fontWeight: 600, color: '#64748b', marginRight: 8 }}>Cliente</label>
                    <input type="text" value={cliente} onChange={e => setCliente(e.target.value)} placeholder="Nombre del cliente (opcional)" style={{ width: '100%', padding: '0.7rem', borderRadius: 8, border: '1px solid #cbd5e1', fontSize: '1rem' }} />
                  </div>
                  <div style={{ flex: 2 }}>
                    <label style={{ fontWeight: 600, color: '#64748b', marginRight: 8 }}>Observaciones</label>
                    <input type="text" value={observaciones} onChange={e => setObservaciones(e.target.value)} placeholder="Observaciones (opcional)" style={{ width: '100%', padding: '0.7rem', borderRadius: 8, border: '1px solid #cbd5e1', fontSize: '1rem' }} />
                  </div>
                </div>
                {/* Botón para generar venta (a implementar backend) */}
                {errorPago && <div style={{ color: '#dc2626', fontWeight: 600, marginBottom: 8 }}>{errorPago}</div>}
                {mensajeVenta && <div style={{ color: mensajeVenta.startsWith('✅') ? '#059669' : '#dc2626', fontWeight: 700, marginBottom: 12 }}>{mensajeVenta}</div>}
                <button
                  disabled={carrito.length === 0 || totalPago !== totalVenta || totalPago > totalVenta || !!errorPago || loadingVenta}
                  onClick={handleGenerarVenta}
                  style={{ width: '100%', background: 'linear-gradient(135deg, #059669, #10b981)', color: '#fff', border: 'none', padding: '1.1rem', borderRadius: 12, fontSize: '1.2rem', fontWeight: 800, cursor: carrito.length === 0 || totalPago !== totalVenta || totalPago > totalVenta || !!errorPago || loadingVenta ? 'not-allowed' : 'pointer', boxShadow: '0 2px 8px rgba(16,185,129,0.10)', marginTop: 12 }}
                >
                  {loadingVenta ? 'Registrando venta...' : 'Generar venta'}
                </button>
              </>
            ) : (
              <div style={{ 
                color: '#64748b', 
                fontWeight: 600, 
                display: 'flex', 
                alignItems: 'center', 
                justifyContent: 'center', 
                minHeight: 200,
                fontSize: '1.1rem'
              }}>
                Debe abrir la caja para registrar ventas.
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
} 